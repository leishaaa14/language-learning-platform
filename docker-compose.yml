version: '3.9'

services:
  # 1. MongoDB Database (External Dependency)
  mongodb:
    image: mongo:6.0
    container_name: mongodb_db
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password

  # 2. Redis Cache (External Dependency)
  redis:
    image: redis:7.2-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"

  # 3. Node.js Express Backend (Main API)
  backend:
    build:
      context: ./backend          # Build from files in the backend/ directory
      dockerfile: Dockerfile_API  # Use the Dockerfile_API file
    container_name: node_backend_api
    restart: unless-stopped
    ports:
      - "5000:5000"
    env_file:
      - ./backend/.env           # Inject secrets from the .env file
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      # Mount source code for development (allows host changes to reflect in container)
      - ./backend:/app:cached
      - /app/node_modules        # Explicitly hide container node_modules from host

  # 4. LLM Python Service (Fine-tuned t5-small)
  llm_service:
    build:
      context: ./backend          # Build from files in the backend/ directory
      dockerfile: Dockerfile_LLM  # Use the Dockerfile_LLM file
    container_name: llm_service_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    # Mount model weights, which must be accessible to llm_service.py
    volumes:
      - ./backend/models/fine-tuned-t5:/app/models/fine-tuned-t5 
    depends_on:
      - backend

  # 5. React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile_Frontend
    container_name: react_frontend_ui
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  mongo_data:

networks:
  default:
    name: language_platform_network